"""
Takes input a JSON from user which has base64 encoded image.
"""

import base64
import numpy as np
from io import BytesIO
from PIL import Image
import cv2
import tensorflow as tf


# Get JSON
bse = b""
image_binary = base64.b64decode(bse)
# image_binary = BytesIO(image_binary)

image_pil = Image.open(BytesIO(image_binary))
rgb_image = image_pil.convert('RGB')
image_array = np.array(rgb_image)
print(image_array.shape)

# Resize image for inceptionV3
image_array = cv2.resize(image_array, (299, 299), interpolation=cv2.INTER_AREA)
print(image_array.shape)


# Load encoder and decoder for the model
# encoder = tf.keras.load_weights('captionit-encoder-baseline.h5')
# decoder = tf.keras.load_weights('captionit-decoder-baseline.h5')

# Load feature extraction model


# image_features_extract_model = tf.keras.models.load_model('image_features_extract_model.h5', compile=False)

def generate_caption(image):

    hidden = decoder.reset_state(batch_size=1)

    # Extract image features from InceptionV3
    img_tensor_val = image_features_extract_model(image)
    img_tensor_val = tf.reshape(img_tensor_val, (img_tensor_val.shape[0], -1, img_tensor_val.shape[3]))

    features = encoder(img_tensor_val)


def handle_request(event, context):
    return {}